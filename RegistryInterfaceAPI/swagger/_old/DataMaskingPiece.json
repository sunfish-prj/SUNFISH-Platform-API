{
    "swagger": "2.0",
    "info": {
        "version": "2.0.0",
        "title": "SUNFISH Blockchain API - Data masking pieces",
        "contact": {
            "name": "Md Sadek Ferdous",
            "email": "S.Ferdous@soton.ac.uk"
        }
    },
    "basePath": "/api/datamasking/pieces",
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/register": {
            "post": {
                "description": "This endpoint is used to register a piece.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body in JSON",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/register-body"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response body for a successful response.",
                        "schema": {
                            "$ref": "#/definitions/register-response"
                        }
                    },
                    "400": {
                        "description": "Invalid request, required parameter(s) missing."
                    },
                    "401": {
                        "description": "The operation is not allowed (unauthorised access, the token is invalid, etc.)."
                    }
                }
            }
        },
        "/read": {
            "post": {
                "description": "This endpoint is used to return a piece by a given ID.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body in JSON",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/read-body"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response body for a successful response.",
                        "schema": {
                            "$ref": "#/definitions/read-update-response"
                        }
                    },
                    "400": {
                        "description": "Invalid request, required parameter(s) missing"
                    },
                    "401": {
                        "description": "The operation is not allowed (unauthorised access, the token is invalid, etc.)."
                    }
                }
            }
        },
        "/delete": {
            "post": {
                "description": "This endpoint is used to destroy a piece by its unique ID.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body in JSON",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delete-body"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response body for a successful response.",
                        "schema": {
                            "$ref": "#/definitions/response"
                        }
                    },
                    "400": {
                        "description": "Invalid request, required parameter(s) missing"
                    },
                    "401": {
                        "description": "The operation is not allowed (unauthorised access, the token is invalid, etc.)."
                    }
                }
            }
        },
        "/update": {
            "post": {
                "description": "This endpoint is used to update addresses in a piece.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body in JSON",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update-body"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response body for a successful response.",
                        "schema": {
                            "$ref": "#/definitions/read-update-response"
                        }
                    },
                    "400": {
                        "description": "Invalid request, required parameter(s) missing"
                    },
                    "401": {
                        "description": "The operation is not allowed (unauthorised access, the token is"
                    }
                }
            }
        }
    },
    "definitions": {
        "register-body": {
            "type": "object",
            "description": "HTTP body defining the register operation for the /register endpoint.",
            "required": [
                "requestorID",
                "token",
                "addresses",
                "tableID",
                "position"
            ],
            "properties": {
                "requestorID": {
                    "type": "string",
                    "description": "Identifier of the requesting entity."
                },
                "token": {
                    "type": "string",
                    "description": "A crypto token to validate if the entity is allowed to perform the requested operation."
                },
                "addresses": {
                    "type": "string",
                    "description": "The addresses where the piece is stored in the cloud/server."
                },
                "tableID": {
                    "type": "string",
                    "description": "Identifier of the encrypted masking table that the piece relates to."
                },
                "position": {
                    "type": "string",
                    "description": "The position where the piece is located in the table."
                }
            }
        },
        "read-body": {
            "type": "object",
            "description": "HTTP body defining the read operation for the /read endpoint",
            "required": [
                "requestorID",
                "token",
                "pieceID"
            ],
            "properties": {
                "requestorID": {
                    "type": "string",
                    "description": "Identifier of the requesting entity."
                },
                "token": {
                    "type": "string",
                    "description": "A crypto token to validate if the entity is allowed to perform the requested operation."
                },
                "pieceID": {
                    "type": "string",
                    "description": "Identifier of a piece."
                }
            }
        },
        "delete-body": {
            "type": "object",
            "description": "HTTP body defining the delete operation for the /delete endpoint",
            "required": [
                "requestorID",
                "token",
                "pieceID"
            ],
            "properties": {
                "requestorID": {
                    "type": "string",
                    "description": "Identifier of the requesting entity."
                },
                "token": {
                    "type": "string",
                    "description": "A crypto token to validate if the entity is allowed to perform the requested operation."
                },
                "pieceID": {
                    "type": "string",
                    "description": "Identifier of a piece."
                }
            }
        },
        "update-body": {
            "type": "object",
            "description": "HTTP body defining the update operation for the /update endpoint",
            "required": [
                "requestorID",
                "token",
                "pieceID",
                "addresses"
            ],
            "properties": {
                "requestorID": {
                    "type": "string",
                    "description": "Identifier of the requesting entity."
                },
                "token": {
                    "type": "string",
                    "description": "A crypto token to validate if the entity is allowed to perform the requested operation."
                },
                "pieceID": {
                    "type": "string",
                    "description": "Identifier of a piece."
                },
                "addresses": {
                    "type": "string",
                    "description": "The new addresses where the piece and its replicas are stored in the cloud/server."
                }
            }
        },
        "response": {
            "type": "object",
            "description": "HTTP response for a successful operation",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "description": "A message signifying that the operation has been successfully performed."
                }
            }
        },
        "register-response": {
            "type": "object",
            "description": "HTTP response for a successful register operation",
            "required": [
                "pieceID"
            ],
            "properties": {
                "pieceID": {
                    "type": "string",
                    "description": "Identifier of a piece"
                }
            }
        },
        "read-update-response": {
            "type": "object",
            "description": "HTTP response for a successful read/update operation",
            "required": [
                "pieceID",
                "addresses",
                "tableID",
                "position"
            ],
            "properties": {
                "pieceID": {
                    "type": "string",
                    "description": "Identifier of a piece."
                },
                "addresses": {
                    "type": "string",
                    "description": "The addresses where the piece is stored in the cloud/server."
                },
                "tableID": {
                    "type": "string",
                    "description": "Identifier of the encrypted masking table that the piece relates to."
                },
                "position": {
                    "type": "string",
                    "description": "The position where the piece is located in the table."
                }
            }
        }
    }
}