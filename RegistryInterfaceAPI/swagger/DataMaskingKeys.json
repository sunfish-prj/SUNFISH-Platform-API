{
    "swagger": "2.0",
    "info": {
        "version": "2.0.0",
        "title": "SUNFISH Blockchain API - Data masking keys",
        "contact": {
            "name": "Md Sadek Ferdous",
            "email": "S.Ferdous@soton.ac.uk"
        }
    },
    "basePath": "/api/datamasking/keys/",
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/store": {
            "post": {
                "description": "This endpoint is used to register a public key for an authorised data consumer account.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body in JSON",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/register-body"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response body for a successful response.",
                        "schema": {
                            "$ref": "#/definitions/response"
                        }
                    },
                    "400": {
                        "description": "Invalid request, required parameter(s) missing."
                    },
                    "401": {
                        "description": "The operation is not allowed (unauthorised access, the token is invalid, etc.)."
                    }
                }
            }
        },
        "/read": {
            "post": {
                "description": "This endpoint is used to retrieve the public key associated with a user.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body in JSON",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/read-body"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response body for a successful response.",
                        "schema": {
                            "$ref": "#/definitions/read-response"
                        }
                    },
                    "400": {
                        "description": "Invalid request, required parameter(s) missing"
                    },
                    "401": {
                        "description": "The operation is not allowed (unauthorised access, the token is invalid, etc.)."
                    }
                }
            }
        },
        "/update": {
            "post": {
                "description": "This endpoint is used to update a public key given a userID.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body in JSON",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update-body"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response body for a successful response.",
                        "schema": {
                            "$ref": "#/definitions/response"
                        }
                    },
                    "400": {
                        "description": "Invalid request, required parameter(s) missing."
                    },
                    "401": {
                        "description": "The operation is not allowed (unauthorised access, the token is invalid, etc.)."
                    }
                }
            }
        },
        "/delete": {
            "post": {
                "description": "This endpoint is used to destroy a public key given a userID. \n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body in JSON",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delete-body"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response body for a successful response.",
                        "schema": {
                            "$ref": "#/definitions/response"
                        }
                    },
                    "400": {
                        "description": "Invalid request, required parameter(s) missing"
                    },
                    "401": {
                        "description": "The operation is not allowed (unauthorised access, the token is invalid, etc.)."
                    }
                }
            }
        }
    },
    "definitions": {
        "register-body": {
            "type": "object",
            "description": "HTTP body defining the register operation for the /register endpoint.",
            "required": [
                "requestorID",
                "token",
                "userID",
                "key"
            ],
            "properties": {
                "requestorID": {
                    "type": "string",
                    "description": "Identifier of the requesting entity."
                },
                "token": {
                    "type": "string",
                    "description": "A crypto token to validate if the entity is allowed to perform the requested operation."
                },
                "userID": {
                    "type": "string",
                    "description": "Identifier of an authorised data consumer."
                },
                "key": {
                    "type": "string",
                    "description": "Public key to be registered."
                }
            }
        },
        "read-body": {
            "type": "object",
            "description": "HTTP body defining the read operation for the /read endpoint",
            "required": [
                "requestorID",
                "token",
                "userID"
            ],
            "properties": {
                "requestorID": {
                    "type": "string",
                    "description": "Identifier of the requesting entity."
                },
                "token": {
                    "type": "string",
                    "description": "A crypto token to validate if the entity is allowed to perform the requested operation."
                },
                "userID": {
                    "type": "string",
                    "description": "Identifier of a user."
                }
            }
        },
        "update-body": {
            "type": "object",
            "description": "HTTP body defining the register operation for the /register endpoint.",
            "required": [
                "requestorID",
                "token",
                "userID",
                "key"
            ],
            "properties": {
                "requestorID": {
                    "type": "string",
                    "description": "Identifier of the requesting entity."
                },
                "token": {
                    "type": "string",
                    "description": "A crypto token to validate if the entity is allowed to perform the requested operation."
                },
                "userID": {
                    "type": "string",
                    "description": "Identifier of a user."
                },
                "key": {
                    "type": "string",
                    "description": "The new public key."
                }
            }
        },
        "delete-body": {
            "type": "object",
            "description": "HTTP body defining the delete operation for the /read endpoint",
            "required": [
                "requestorID",
                "token",
                "userID"
            ],
            "properties": {
                "requestorID": {
                    "type": "string",
                    "description": "Identifier of the requesting entity."
                },
                "token": {
                    "type": "string",
                    "description": "A crypto token to validate if the entity is allowed to perform the requested operation."
                },
                "userID": {
                    "type": "string",
                    "description": "Identifier of a user."
                }
            }
        },
        "response": {
            "type": "object",
            "description": "HTTP response for a successful operation",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "description": "A message signifying that the operation has been successfully performed."
                }
            }
        },
        "read-response": {
            "type": "object",
            "description": "HTTP response for a successful read operation",
            "required": [
                "userID",
                "key"
            ],
            "properties": {
                "userID": {
                    "type": "string",
                    "description": "Identifier of the user."
                },
                "key": {
                    "type": "string",
                    "description": "The requested public key."
                }
            }
        }
    }
}